<?php

/*
    DB_CalcField.lib, Dominion, the WebAbility(r) Database Abstraction Layer
    Contains the class to manage calculated fields based on natural fields
    (c) 2008-2010 Philippe Thomassigny

    This file is part of Dominion

    Dominion is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Dominion is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Dominion.  If not, see <http://www.gnu.org/licenses/>.
*/

/* @UML_Box -- Do not edit
|------------------------------------------------------------------|
| DB_CalcField: Database connector object                               |
|------------------------------------------------------------------|
|------------------------------------------------------------------|
|------------------------------------------------------------------|
@End_UML_Box */

// =====================================================
// Object DB_CalcField
// Contructor: __construct($name, $op);
//    $name is the name of the field
//    $op is the operator to use: "none", "sum", "avg", "min", "max", "count"
// =====================================================

class DB_CalcField extends WADebug
{
  const NONE = "none";
  const DISTINCT = "distinct";
  const SUM = "sum";
  const AVG = "avg";
  const MIN = "min";
  const MAX = "max";
  const COUNT = "count";
  const COUNTDISTINCT = "countdistinct";

  private $name = null;
  private $field = null;
  private $op = null;

  function __construct($name, $field, $op)
  {
    parent::__construct();
    $this->name = $name;
    $this->field = $field;
    $this->op = $op;
  }

  public function createCalcField($id, $DB, $prefix = "")
  {
    $calc = "";
    switch($this->op)
    {
      case DB_CalcField::NONE: $calc = $prefix.$id.$this->field;
      break;
      case DB_CalcField::DISTINCT: $calc = "distinct ".$prefix.$id.$this->field;
      break;
      case DB_CalcField::SUM: $calc = "sum(".$prefix.$id.$this->field.")";
      break;
      case DB_CalcField::AVG: $calc = "avg(".$prefix.$id.$this->field.")";
      break;
      case DB_CalcField::MIN: $calc = "min(".$prefix.$id.$this->field.")";
      break;
      case DB_CalcField::MAX: $calc = "max(".$prefix.$id.$this->field.")";
      break;
      case DB_CalcField::COUNT: $calc = "count(".$prefix.$id.$this->field.")";
      break;
      case DB_CalcField::COUNTDISTINCT: $calc = "count(distinct ".$prefix.$id.$this->field.")";
      break;
    }

    return $calc;
  }

  public function getName()
  {
    return $this->name;
  }

  public function getField()
  {
    return $this->field;
  }

  public function getOperation()
  {
    return $this->op;
  }
}

?>